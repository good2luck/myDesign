/**
 * @descrition 策略模式
 * @author xudj
 * @date 2016年9月29日 上午9:29:50
 * @version 1.0
 */
/**
 * 在策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。
 * 在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的context对象。策略对象改变context对象的执行算法。
 * 介绍
 * 意图：定义一系列的算法，把它们以个个封装起来，并且使它们可相互替换。
 * 主要解决：在有多种算法相似的情况下，使用if...else所带来的复杂和难以维护。
 * 何时使用：一个系统有许多许多类，而区分它们的只是它们直接的行为。
 * 如何解决：将这些算法封装成一个个的类，任意的替换。
 * 关键代码：实现同一个接口。
 * 应用实例：1、诸葛亮的锦囊妙计，每个锦囊都是一个策略。2、旅行的出游方式	，选择骑自行车、坐汽车，每一种旅行方式都是一个策略。
 * 3、JAVA AWT中的LayoutManager。
 * 优点：1、算法可以自由切换。2、避免使用多重条件判断。3、扩展性良好。
 * 缺点：1、策略类会增多。 2、所有策略类都需要对外暴露。
 * 使用场景： 1、如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。
 *  2、一个系统需要动态地在几种算法中选择一种。
 *  3、如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。
 * 注意事项：如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题。
 */
package com.pattern2._5strategy;